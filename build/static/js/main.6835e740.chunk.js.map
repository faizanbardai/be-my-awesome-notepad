{"version":3,"sources":["apis/index.js","components/Header.jsx","components/NotesList.jsx","components/Notepad.jsx","components/FirstNote.jsx","components/Main.jsx","index.js"],"names":["baseURL","process","apiGetAllNotes","a","fetch","apiSaveNote","text","method","headers","body","JSON","stringify","apiUpdateNote","note","_id","apiDeleteNoteByID","Header","props","className","style","position","onClick","setAddNewNote","setSelectedNote","alt","src","NotesList","cursor","notes","map","key","selectedNote","filter","x","setNotes","length","height","substring","Notepad","placeholder","required","value","onChange","e","target","FirstNote","type","enableSave","then","response","json","newNote","Note","useState","addNewNote","setEnableSave","loading","setLoading","fetchNotes","useEffect","find","color","width","oldNote","updatedNote","newNotesArray","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6835e740.chunk.js","sourcesContent":["const baseURL = process.env.REACT_APP_BASE_URL;\r\n// API to get all the notes saved in database\r\nexport const apiGetAllNotes = async () => {\r\n  return await fetch(baseURL + \"/notes\");\r\n};\r\n// API to save a note\r\nexport const apiSaveNote = async (text) => {\r\n  return await fetch(baseURL + \"/notes\", {\r\n    method: \"POST\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ text }),\r\n  });\r\n};\r\n// API to update a note by ID\r\nexport const apiUpdateNote = async (note) => {\r\n  return await fetch(baseURL + \"/notes/\" + note._id, {\r\n    method: \"PUT\",\r\n    headers: {\r\n      \"Content-Type\": \"application/json\",\r\n    },\r\n    body: JSON.stringify({ text: note.text }),\r\n  });\r\n};\r\n// API to delete a note by ID\r\nexport const apiDeleteNoteByID = async (_id) => {\r\n  return await fetch(baseURL + \"/notes/\" + _id, {\r\n    method: \"DELETE\",\r\n  });\r\n};\r\n","import React from \"react\";\r\n\r\nexport default function Header(props) {\r\n  return (\r\n    <div className=\"border-bottom border-dark py-2\">\r\n      <img\r\n        className=\"btn btn-outline-success rounded-circle border-0 p-1\"\r\n        style={{ position: \"absolute\" }}\r\n        onClick={() => {\r\n          props.setAddNewNote(true);\r\n          props.setSelectedNote({ text: \"\" });\r\n        }}\r\n        alt=\"add a note\"\r\n        src=\"https://img.icons8.com/material-sharp/24/000000/plus-math.png\"\r\n      />\r\n      <div className=\"w-100 text-center py-1\">My Awesome Notepad</div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { apiDeleteNoteByID } from \"../apis\";\r\n\r\nexport default function NotesList(props) {\r\n  return (\r\n    <ul className=\"list-group list-group-flush\" style={{ cursor: \"pointer\" }}>\r\n      {props.notes.map((note) => (\r\n        <li\r\n          key={note._id}\r\n          // note in note list is set to active if it is the selected note by user\r\n          className={`list-group-item list-group-item-action p-0 ${\r\n            note._id === props.selectedNote._id ? \"active\" : null\r\n          }`}\r\n        >\r\n          <div className=\"d-flex\">\r\n            <button className=\"btn btn-outline-danger rounded-circle p-1 my-1 border-0\">\r\n              <img\r\n                onClick={() => {\r\n                  // deleting the note by ID\r\n                  apiDeleteNoteByID(note._id);\r\n                  // Removing the note deleted\r\n                  const notes = props.notes.filter((x) => x._id !== note._id);\r\n                  // Updating the state\r\n                  props.setNotes(notes);\r\n                  // In case the last note was deleted, setting the state\r\n                  // to ask user to add a new note (welcome scrren)\r\n                  if (notes.length === 0) {\r\n                    props.setSelectedNote({ text: \"\" });\r\n                    props.setAddNewNote(true);\r\n                  } else {\r\n                    // If it's not the last note then setting the first not as selected one\r\n                    props.setSelectedNote(notes[0]);\r\n                  }\r\n                }}\r\n                alt=\"delete note\"\r\n                height=\"25px\"\r\n                src=\"https://img.icons8.com/carbon-copy/100/000000/trash.png\"\r\n              />\r\n            </button>\r\n            <div\r\n              onClick={() => props.setSelectedNote(note)}\r\n              className=\"p-1 my-1 w-100\"\r\n            >\r\n              {/* Truncating the text if the note string length exceeds by 35 characters */}\r\n              {note.text.length > 35\r\n                ? `${note.text.substring(0, 35)}...`\r\n                : note.text}\r\n            </div>\r\n          </div>\r\n        </li>\r\n      ))}\r\n    </ul>\r\n  );\r\n}\r\n","import React from \"react\";\r\n\r\nexport default function Notepad(props) {\r\n  return (\r\n    <form>\r\n      <div className=\"form-group\">\r\n        <textarea\r\n          placeholder=\"Type your note here...\"\r\n          required\r\n          className=\"form-control border-0\"\r\n          style={{ height: \"500px\" }}\r\n          value={props.selectedNote.text}\r\n          onChange={(e) => {\r\n            props.setSelectedNote({\r\n              ...props.selectedNote,\r\n              text: e.target.value,\r\n            });\r\n          }}\r\n        />\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Notepad from \"./Notepad\";\r\nimport { apiSaveNote } from \"../apis\";\r\n\r\nexport default function FirstNote(props) {\r\n  return (\r\n    <div className=\"container\">\r\n      <div className=\"d-flex border-bottom border-dark py-2\">\r\n        <div className=\"w-100 text-center py-1\">My Awesome Notepad</div>\r\n      </div>\r\n      <Notepad\r\n        selectedNote={props.selectedNote}\r\n        setSelectedNote={props.setSelectedNote}\r\n      />\r\n      <div className=\"fixed-bottom mb-2\">\r\n        <div className=\"container bg-light text-right\">\r\n          {/* \r\n            Cancel button only appears if at least one note exists.\r\n            In case, this is the first note, cancel button is not shown. \r\n          */}\r\n          {props.notes.length > 0 && (\r\n            <button\r\n              type=\"button\"\r\n              className=\"btn btn-outline-primary rounded-pill border-0 mr-2\"\r\n              onClick={() => {\r\n                props.setSelectedNote(props.notes[0]);\r\n                props.setAddNewNote(false);\r\n              }}\r\n            >\r\n              Cancel\r\n            </button>\r\n          )}\r\n          {/* Save button is conditionally rendered */}\r\n          {props.enableSave ? (\r\n            <>\r\n              <button\r\n                type=\"button\"\r\n                className=\"btn btn-outline-primary rounded-pill border-0\"\r\n                onClick={async () => {\r\n                  // Saving a new note\r\n                  const newNote = await apiSaveNote(\r\n                    props.selectedNote.text\r\n                  ).then((response) => response.json());\r\n                  // Adding new note on top of notes array\r\n                  props.setNotes([newNote, ...props.notes]);\r\n                  // Setting the new note as selected\r\n                  props.setSelectedNote(newNote);\r\n                  // After saving the note, note list is displayed\r\n                  props.setAddNewNote(false);\r\n                }}\r\n              >\r\n                Save\r\n              </button>\r\n            </>\r\n          ) : null}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { apiGetAllNotes, apiUpdateNote } from \"../apis\";\r\nimport Header from \"./Header\";\r\nimport NotesList from \"./NotesList\";\r\nimport Notepad from \"./Notepad\";\r\nimport FirstNote from \"./FirstNote\";\r\nimport Loader from \"react-loader-spinner\";\r\nimport \"react-loader-spinner/dist/loader/css/react-spinner-loader.css\";\r\n\r\nexport default function Note() {\r\n  // Saving and accessing all the notes received from database\r\n  const [notes, setNotes] = useState([]);\r\n\r\n  // On selection, a single note is saved in selectedNote\r\n  const [selectedNote, setSelectedNote] = useState();\r\n\r\n  // addNewNote is a boolean value to decide if the add note screen is shown or not\r\n  const [addNewNote, setAddNewNote] = useState(false);\r\n\r\n  // enableSave is a boolean value to display save and cancel buttons\r\n  const [enableSave, setEnableSave] = useState(false);\r\n\r\n  // Setting the state to loading while fetching data from server\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // fetchNotes is an asynchronous function to fetch all the notes from database\r\n  const fetchNotes = async () => {\r\n    // Fetching all notes via API\r\n    const response = await apiGetAllNotes();\r\n\r\n    // Converting the response into JSON\r\n    const notes = await response.json();\r\n\r\n    // Setting the notes to state\r\n    setNotes(notes);\r\n\r\n    // Condition: if an empty notes array is received,\r\n    // selected note is set to empty string and\r\n    // user is shown \"add new note\" screen.\r\n    if (notes.length === 0) {\r\n      setSelectedNote({ text: \"\" });\r\n      setAddNewNote(true);\r\n    } else {\r\n      // Condition: if some notes are received from database then setting the first note as selected.\r\n      setSelectedNote(notes[0]);\r\n    }\r\n\r\n    // After fetch completes, loading is stopped\r\n    setLoading(false);\r\n  };\r\n\r\n  // Using effect to run this operation only once when the component is mounted\r\n  useEffect(() => {\r\n    fetchNotes();\r\n  }, []);\r\n\r\n  // At any time selected note is empty, save button is not displayed.\r\n  useEffect(() => {\r\n    if (selectedNote) {\r\n      setEnableSave(selectedNote.text !== \"\");\r\n    }\r\n  }, [notes, selectedNote]);\r\n\r\n  // Any time the user reverses the changes to note, save button is not displayed.\r\n  useEffect(() => {\r\n    if (notes.length > 0 && selectedNote && selectedNote._id) {\r\n      setEnableSave(\r\n        selectedNote.text !==\r\n          notes.find((note) => note._id === selectedNote._id).text\r\n      );\r\n    }\r\n  }, [notes, selectedNote]);\r\n  return (\r\n    <>\r\n      {/* Loading conditionally rendered */}\r\n      {loading && (\r\n        <div className=\"vw-100 vh-100 d-flex justify-content-center align-items-center\">\r\n          <Loader type=\"Puff\" color=\"#00BFFF\" height={100} width={100} />\r\n        </div>\r\n      )}\r\n      {/* If add new note is true, First Note screen is shown */}\r\n      {!loading && addNewNote && (\r\n        <FirstNote\r\n          notes={notes}\r\n          selectedNote={selectedNote}\r\n          setNotes={setNotes}\r\n          enableSave={enableSave}\r\n          setSelectedNote={setSelectedNote}\r\n          setAddNewNote={setAddNewNote}\r\n        />\r\n      )}\r\n\r\n      {/* Otherwise list of notes and main notepad is displayed */}\r\n      {!loading && !addNewNote && (\r\n        <div className=\"container\">\r\n          <Header\r\n            setAddNewNote={setAddNewNote}\r\n            setSelectedNote={setSelectedNote}\r\n          />\r\n          <div className=\"row\">\r\n            <div className=\"col-sm-12 col-md-4 \">\r\n              <NotesList\r\n                notes={notes}\r\n                selectedNote={selectedNote}\r\n                setSelectedNote={setSelectedNote}\r\n                setNotes={setNotes}\r\n                setAddNewNote={setAddNewNote}\r\n              />\r\n            </div>\r\n            <div className=\"col-sm-12 col-md-8 border-left border-dark\">\r\n              <Notepad\r\n                selectedNote={selectedNote}\r\n                setSelectedNote={setSelectedNote}\r\n              />\r\n            </div>\r\n          </div>\r\n          <div className=\"mb-2\">\r\n            <div className=\"container bg-light text-right\">\r\n              {/* Conditionally rendering save/cancel buttons */}\r\n              {enableSave ? (\r\n                <>\r\n                  <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-outline-primary rounded-pill border-0 mr-2\"\r\n                    // If the user decides to cancel the changes,\r\n                    // fiding the note by ID in notes array and seeting the note found as selected\r\n                    onClick={() => {\r\n                      const oldNote = notes.find(\r\n                        (note) => note._id === selectedNote._id\r\n                      );\r\n                      setSelectedNote(oldNote);\r\n                    }}\r\n                  >\r\n                    Cancel\r\n                  </button>\r\n                  <button\r\n                    className=\"btn btn-outline-primary rounded-pill border-0\"\r\n                    // Updating the note by ID\r\n                    onClick={async () => {\r\n                      const updatedNote = await apiUpdateNote(\r\n                        selectedNote\r\n                      ).then((response) => response.json());\r\n                      // Removing the old note\r\n                      let newNotesArray = notes.filter(\r\n                        (x) => x._id !== updatedNote._id\r\n                      );\r\n                      // Adding newly updated note to the top of the array\r\n                      newNotesArray = [updatedNote, ...newNotesArray];\r\n                      // Updating the notes state\r\n                      setNotes(newNotesArray);\r\n                    }}\r\n                  >\r\n                    Save\r\n                  </button>\r\n                </>\r\n              ) : null}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Main from \"./components/Main.jsx\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Main />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}